<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Storage on music</title><link>https://regiocast.github.io/music-docs/server/storage/</link><description>Recent content in Storage on music</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jan 2000 00:00:00 +0000</lastBuildDate><atom:link href="https://regiocast.github.io/music-docs/server/storage/index.xml" rel="self" type="application/rss+xml"/><item><title>Database</title><link>https://regiocast.github.io/music-docs/server/storage/database/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/storage/database/</guid><description>Music requires the use of a database backend for persistence. Music uses an embedded sqlite database by default, which does not require any additional configuration. This article provides a basic overview of alternate database configurations.
Postgres Music supports postgres 9.6 and higher as the database engine. The below example demonstrates postgres database configuration. Please reference the official driver documentation for connection string configuration details.
MUSIC_DATABASE_DRIVER=postgres MUSIC_DATABASE_DATASOURCE=postgres://root:password@1.2.3.4:5432/postgres?sslmode=disable MUSIC_DATABASE_CONNECTIONS=11 MUSIC_DATABASE_CONNECTIONS should be at max the half of the possible max_connections in your postgres config, to prevent connection issues on Blue/Green deployments.</description></item></channel></rss>