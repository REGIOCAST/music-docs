<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Music Database</title><link>https://regiocast.github.io/music-docs/</link><description>Recent content on Music Database</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jan 2000 00:00:00 +0000</lastBuildDate><atom:link href="https://regiocast.github.io/music-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Database</title><link>https://regiocast.github.io/music-docs/server/storage/database/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/storage/database/</guid><description>Music requires the use of a database backend for persistence. Music uses an embedded sqlite database by default, which does not require any additional configuration. This article provides a basic overview of alternate database configurations.
Postgres Music supports postgres 9.6 and higher as the database engine. The below example demonstrates postgres database configuration. Please reference the official driver documentation for connection string configuration details.
MUSIC_DATABASE_DRIVER=postgres MUSIC_DATABASE_DATASOURCE=postgres://root:password@1.2.3.4:5432/postgres?sslmode=disable MySQL Music supports mysql 5.</description></item><item><title>Overview</title><link>https://regiocast.github.io/music-docs/server/overview/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/overview/</guid><description>This section of the documentation will help you install and configure the Music Server.
Configuration Guides Certificates Headers Logging Database</description></item><item><title>Overview</title><link>https://regiocast.github.io/music-docs/api/overview/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/api/overview/</guid><description>Music provides a comprehensive remote API for interacting with the server. This section of the documents provides instructions for using the API.</description></item><item><title>Certificates</title><link>https://regiocast.github.io/music-docs/server/configuration/https/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/https/</guid><description>Lets Encrypt Music supports automated SSL configuration and updates using Let&amp;rsquo;s Encrypt. You can enable Letâ€™s encrypt with the following flag:
Enable Lets Encrypt with the following parameter:
MUSIC_TLS_AUTOCERT=true Ensure the desired hostname is configured:
MUSIC_SERVER_HOST=domain.com MUSIC_SERVER_PROTO=https Expose the standard http and https ports:
docker run \ -p 80:80 \ -p 443:443 Mount the certificate cache to the host:
docker run \ -v /var/lib/music:/data Certificate Cache Music caches generated certificates on disk at /data/golang-autocert.</description></item><item><title>Headers</title><link>https://regiocast.github.io/music-docs/server/configuration/headers/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/headers/</guid><description>Music provides a number of configuration options that can be used to secure http requests. Here is a list of available parameters:
MUSIC_HTTP_ALLOWED_HOSTS MUSIC_HTTP_PROXY_HEADERS MUSIC_HTTP_SSL_REDIRECT MUSIC_HTTP_SSL_TEMPORARY_REDIRECT MUSIC_HTTP_SSL_HOST MUSIC_HTTP_SSL_PROXY_HEADERS MUSIC_HTTP_STS_SECONDS MUSIC_HTTP_STS_INCLUDE_SUBDOMAINS MUSIC_HTTP_STS_PRELOAD MUSIC_HTTP_STS_FORCE_HEADER MUSIC_HTTP_BROWSER_XSS_FILTER MUSIC_HTTP_FRAME_DENY MUSIC_HTTP_CONTENT_TYPE_NO_SNIFF MUSIC_HTTP_CONTENT_SECURITY_POLICY MUSIC_HTTP_REFERRER_POLICY This document is still a work-in-progress. You can read more about each of these parameters at github.com/unrolled/secure.
Recommended Headers We recommend setting these configuration parameters. Please note these parameters should only be used when SSL is enabled.</description></item><item><title>Logging</title><link>https://regiocast.github.io/music-docs/server/configuration/logging/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/logging/</guid><description>The server logs are written to stderr and are captured by the Docker daemon. You can access the server logs by running the following Docker command:
$ docker logs &amp;lt;container name&amp;gt; The default log level is INFO. You can enable more detailed debug logging with the following configuration parameter:
MUSIC_LOGS_DEBUG=true Logs are written to stderr in json-format. You can change the default log format to something more human-readable with the following configuration parameters:</description></item><item><title>Album Attach Artist</title><link>https://regiocast.github.io/music-docs/api/albums/album_attach_artist/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_attach_artist/</guid><description>Attach an Artist to given Album.
POST /api/albums/{albumid}/artists Example Body Params:
{ &amp;#34;artists&amp;#34;: [ &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; ] } Response is 204 NoContent</description></item><item><title>Album Attach Song</title><link>https://regiocast.github.io/music-docs/api/albums/album_attach_song/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_attach_song/</guid><description>Attach a Song to given Album.
POST /api/albums/{albumid}/songs You can use SongId to attach a single song or songs to attach many songs.
{ &amp;#34;songId&amp;#34;: &amp;#34;823a18d1-6203-4e64-b16a-de2ae6876d62&amp;#34;, &amp;#34;songs&amp;#34;: [&amp;#34;823a18d1-6203-4e64-b16a-de2ae6876d62&amp;#34;] } Response is 204 NoContent</description></item><item><title>Album Create</title><link>https://regiocast.github.io/music-docs/api/albums/album_create/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_create/</guid><description>Create a new Album.
Creates a album: POST /api/albums Example Body Params:
{ &amp;#34;name&amp;#34;: &amp;#34;One Hot Minute 2&amp;#34;, &amp;#34;recordLabel&amp;#34;: &amp;#34;Warner Bros.&amp;#34; } Example Response Body:
1 2 3 4 5 6 7 8 9 10 11 { &amp;#34;id&amp;#34;: &amp;#34;b1af16e3-4cad-4a81-a35a-9c6208f57195&amp;#34;, &amp;#34;copyright&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isComplete&amp;#34;: false, &amp;#34;isSingle&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;One Hot Minute 2&amp;#34;, &amp;#34;recordLabel&amp;#34;: &amp;#34;Warner Bros.&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;0001-01-01T00:00:00Z&amp;#34;, &amp;#34;trackCount&amp;#34;: 0, &amp;#34;tracks&amp;#34;: null }</description></item><item><title>Album Delete</title><link>https://regiocast.github.io/music-docs/api/albums/album_delete/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_delete/</guid><description>Delete one Album
DELETE /api/albums/{id}</description></item><item><title>Album Detach Artist</title><link>https://regiocast.github.io/music-docs/api/albums/album_detach_artist/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_detach_artist/</guid><description>Detach an Artist from given Album.
DELETE /api/albums/{albumid}/artists Example Body Params:
{ &amp;#34;artists&amp;#34;: [ &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; ] } Response is 204 NoContent</description></item><item><title>Album Detach Song</title><link>https://regiocast.github.io/music-docs/api/albums/album_detach_song/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_detach_song/</guid><description>Detach a Song from given Album.
DELETE /api/albums/{albumid}/songs Example Body Params:
{ &amp;#34;songs&amp;#34;: [ &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; ] } Response is 204 NoContent</description></item><item><title>Album Find</title><link>https://regiocast.github.io/music-docs/api/albums/album_find/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_find/</guid><description>Find one Album
GET /api/albums/{id} Response
{ &amp;#34;id&amp;#34;: &amp;#34;7833d476-d89b-48d8-b232-dd3db7013391&amp;#34;, &amp;#34;copyright&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isComplete&amp;#34;: false, &amp;#34;isSingle&amp;#34;: false, &amp;#34;name&amp;#34;: &amp;#34;One Hot Minute&amp;#34;, &amp;#34;recordLabel&amp;#34;: &amp;#34;Warner Bros.&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;0001-01-01T00:00:00Z&amp;#34;, &amp;#34;trackCount&amp;#34;: 0, &amp;#34;tracks&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;823a18d1-6203-4e64-b16a-de2ae6876d62&amp;#34;, &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31Z&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1, &amp;#34;albumId&amp;#34;: &amp;#34;7833d476-d89b-48d8-b232-dd3db7013391&amp;#34;, &amp;#34;album&amp;#34;: null, &amp;#34;scheduleInfo&amp;#34;: null, &amp;#34;libraryInfo&amp;#34;: null, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-07T16:40:05.53642+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-07T16:40:05.53642+02:00&amp;#34; } ] }</description></item><item><title>Album List</title><link>https://regiocast.github.io/music-docs/api/albums/album_list/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_list/</guid><description>Lists all Albums
GET /api/albums Example Response Body:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 [ { &amp;#34;id&amp;#34;: &amp;#34;7833d476-d89b-48d8-b232-dd3db7013391&amp;#34;, &amp;#34;artists&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34;, &amp;#34;members&amp;#34;: null, &amp;#34;albums&amp;#34;: null, &amp;#34;ipi&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isni&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;sortName&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-08T12:29:17.</description></item><item><title>Artist Create</title><link>https://regiocast.github.io/music-docs/api/artists/artist_create/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_create/</guid><description>Create a new Artist.
POST /api/artists Request
{ &amp;#34;name&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, } Response
{ &amp;#34;id&amp;#34;: &amp;#34;33244a4b-dfc5-4317-9039-d2cebfb12782&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213112+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.214982+02:00&amp;#34; } This Query will just create a new Artist (Band), but sometimes you want to create the entire band at once. You can use Upsert for this.
All Band members will be created and the relations will be auto-generated. Example:
Request
{ &amp;#34;name&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;members&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Anthony Kiedis&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Michael â€žFleaâ€œ Balzary&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;Chad Smith&amp;#34; }, { &amp;#34;name&amp;#34;: &amp;#34;John Frusciante&amp;#34; } ] } Response</description></item><item><title>Artist Delete</title><link>https://regiocast.github.io/music-docs/api/artists/artist_delete/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_delete/</guid><description/></item><item><title>Artist Find</title><link>https://regiocast.github.io/music-docs/api/artists/artist_find/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_find/</guid><description>Find Artist by ID
GET /api/artists/{id} By default all members of an artist are preloaded.
{ &amp;#34;id&amp;#34;: &amp;#34;33244a4b-dfc5-4317-9039-d2cebfb12782&amp;#34;, &amp;#34;members&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;0ba86437-61bf-4f25-905a-526a76cb09a4&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Michael â€žFleaâ€œ Balzary&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;13d2f8a6-4f5d-45c6-b10c-3309f26fdf63&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Chad Smith&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;1d1809df-cf05-4604-97e8-6ff3de542f6a&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Michael â€žFleaâ€œ Balzary&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;3a456127-df78-4d7d-902f-b66b86fb9c44&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Anthony Kiedis&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.213784+02:00&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;609daad8-4052-4173-840c-1e72cc87d180&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Chad Smith&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T13:32:24.</description></item><item><title>Artist List</title><link>https://regiocast.github.io/music-docs/api/artists/artist_list/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_list/</guid><description>Lists all Artists
GET /api/artists Example Response Body:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 [ { &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34;, &amp;#34;members&amp;#34;: null, &amp;#34;albums&amp;#34;: null, &amp;#34;ipi&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isni&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;sortName&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-08T12:29:17.</description></item><item><title>Artist Update</title><link>https://regiocast.github.io/music-docs/api/artists/artist_update/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_update/</guid><description>Update an Artist
PATCH /api/artists/{id} @TODO: Write documentation</description></item><item><title>Artwork Create</title><link>https://regiocast.github.io/music-docs/api/artworks/artwork_create/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artworks/artwork_create/</guid><description>Create a new Artwork.
*POST* /api/artworks Allows to Upload a Artwork to the Service. Request has to be a multipart/form-data req.
form-data:
file the actual file alt alt name of the file Note: Filenames are URI encoded by default, to reduce possible user mistakes.
Response
{ &amp;#34;id&amp;#34;: &amp;#34;f7640b4e-7391-43cc-ae86-716c04d15b01&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Screenshot 2020-10-07 at 09.23.53.png&amp;#34;, &amp;#34;mimeType&amp;#34;: &amp;#34;image/png&amp;#34;, &amp;#34;size&amp;#34;: 4759480, &amp;#34;bucket&amp;#34;: &amp;#34;storage.delivc.com&amp;#34;, &amp;#34;publicPath&amp;#34;: &amp;#34;https://s3-eu-west-1.amazonaws.com/storage.delivc.com/1iYCDvVAta4SHdQlgi9Ty1nyqoR/Screenshot_2020-10-07_at_09.23.53.png&amp;#34;, &amp;#34;alt&amp;#34;: &amp;#34;lalaland&amp;#34;, &amp;#34;width&amp;#34;: 2880, &amp;#34;height&amp;#34;: 1800, &amp;#34;isAnimated&amp;#34;: false, &amp;#34;duration&amp;#34;: 0, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-07T14:50:23.</description></item><item><title>Song</title><link>https://regiocast.github.io/music-docs/api/songs/song/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song/</guid><description>Shows all available API Operatings for song
Create a new Song POST /api/songs Request
{ &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31+00:00&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1 } Response
{ &amp;#34;id&amp;#34;: &amp;#34;b38db132-c4b7-4123-8107-abbb88b7d921&amp;#34;, &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31Z&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1, &amp;#34;albumId&amp;#34;: &amp;#34;00000000-0000-0000-0000-000000000000&amp;#34;, &amp;#34;album&amp;#34;: null, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T12:32:58.473323+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T12:32:58.473323+02:00&amp;#34; } Find Song by ID GET /api/songs/{id} Finds a song by it&amp;rsquo;s ID.</description></item><item><title>Song Albums</title><link>https://regiocast.github.io/music-docs/api/songs/song_album/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_album/</guid><description>Create or Link Album with Song This endpoint allows you to Link an Album -&amp;gt; Song relation or create a new Artist with Relation. If no id is provided a new Album will be created.
POST /api/songs/{songID}/albums If the Album you want to link you can POST
{ &amp;quot;id&amp;quot;: &amp;quot;1607d150-861c-4782-8c1b-abe58254373b&amp;quot; } If you want to create a new Album:
Request
{ &amp;quot;copyright&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;isComplete&amp;quot;: false, &amp;quot;isSingle&amp;quot;: true, &amp;quot;name&amp;quot;: &amp;quot;i am a single&amp;quot;, &amp;quot;recordLabel&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;releaseDate&amp;quot;: &amp;quot;0001-01-01T00:00:00Z&amp;quot;, &amp;quot;trackCount&amp;quot;: 0, } Response</description></item><item><title>Song Artists</title><link>https://regiocast.github.io/music-docs/api/songs/song_artist/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_artist/</guid><description>Create or Link Artist with Song This endpoint allows you to Link an Artist -&amp;gt; Song relation or create a new Artist with Relation. If no id is provided a new Artist will be created.
POST /api/songs/{songID}/artists If the Artist you want to link you can POST
{ &amp;quot;id&amp;quot;: &amp;quot;1607d150-861c-4782-8c1b-abe58254373b&amp;quot; } If you want to create a new Artist:
Request
{ &amp;quot;ipi&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;isni&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Red Hot Chili Peppers&amp;quot;, &amp;quot;sortName&amp;quot;: &amp;quot;&amp;quot; } Response</description></item><item><title>Song Artwork</title><link>https://regiocast.github.io/music-docs/api/songs/song_artwork/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_artwork/</guid><description>List related Artwork To keep the API consistent. This endpoint is returning Array&amp;lt;Artwork&amp;gt;. The max length is 1.
GET /api/songs/{songID}/artwork Response
[ { &amp;#34;id&amp;#34;: &amp;#34;db457d3c-4610-484c-8ac0-e59041bf547c&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;iris-refactor.jpg&amp;#34;, &amp;#34;mimeType&amp;#34;: &amp;#34;image/jpeg&amp;#34;, &amp;#34;size&amp;#34;: 62854, &amp;#34;bucket&amp;#34;: &amp;#34;your.s3bucket.tld&amp;#34;, &amp;#34;publicPath&amp;#34;: &amp;#34;https://s3-eu-west-1.amazonaws.com/your.s3bucket.tld/1id8BSnrT51nZ0itggEocutlHWN/iris-refactor.jpg&amp;#34;, &amp;#34;alt&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;width&amp;#34;: 1031, &amp;#34;height&amp;#34;: 506, &amp;#34;isAnimated&amp;#34;: false, &amp;#34;duration&amp;#34;: 0, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-09T08:46:13.233113+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-09T08:46:13.233113+02:00&amp;#34; } ] Upload a new Artwork for given Song Request must be of type form-data and must contain file. You can append your Form with alt to create a alt-tag for the Artwork on-the-fly.</description></item></channel></rss>