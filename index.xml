<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Music Database on music</title><link>https://regiocast.github.io/music-docs/</link><description>Recent content in Music Database on music</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jan 2000 00:00:00 +0000</lastBuildDate><atom:link href="https://regiocast.github.io/music-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Database</title><link>https://regiocast.github.io/music-docs/server/storage/database/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/storage/database/</guid><description>Music requires the use of a database backend for persistence. Music uses an embedded sqlite database by default, which does not require any additional configuration. This article provides a basic overview of alternate database configurations.
Postgres Music supports postgres 9.6 and higher as the database engine. The below example demonstrates postgres database configuration. Please reference the official driver documentation for connection string configuration details.
MUSIC_DATABASE_DRIVER=postgres MUSIC_DATABASE_DATASOURCE=postgres://root:password@1.2.3.4:5432/postgres?sslmode=disable MUSIC_DATABASE_CONNECTIONS=11 MUSIC_DATABASE_CONNECTIONS should be at max the half of the possible max_connections in your postgres config, to prevent connection issues on Blue/Green deployments.</description></item><item><title>Overview</title><link>https://regiocast.github.io/music-docs/server/overview/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/overview/</guid><description>This section of the documentation will help you install and configure the Music Server.
Configuration Guides Certificates Headers Logging Database</description></item><item><title>Certificates</title><link>https://regiocast.github.io/music-docs/server/configuration/https/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/https/</guid><description>Lets Encrypt Music supports automated SSL configuration and updates using Let&amp;rsquo;s Encrypt. You can enable Letâ€™s encrypt with the following flag:
Enable Lets Encrypt with the following parameter:
MUSIC_TLS_AUTOCERT=true Ensure the desired hostname is configured:
MUSIC_SERVER_HOST=domain.com MUSIC_SERVER_PROTO=https Expose the standard http and https ports:
docker run \ -p 80:80 \ -p 443:443 Mount the certificate cache to the host:
docker run \ -v /var/lib/music:/data Certificate Cache Music caches generated certificates on disk at /data/golang-autocert.</description></item><item><title>Headers</title><link>https://regiocast.github.io/music-docs/server/configuration/headers/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/headers/</guid><description>Music provides a number of configuration options that can be used to secure http requests. Here is a list of available parameters:
MUSIC_HTTP_ALLOWED_HOSTS MUSIC_HTTP_PROXY_HEADERS MUSIC_HTTP_SSL_REDIRECT MUSIC_HTTP_SSL_TEMPORARY_REDIRECT MUSIC_HTTP_SSL_HOST MUSIC_HTTP_SSL_PROXY_HEADERS MUSIC_HTTP_STS_SECONDS MUSIC_HTTP_STS_INCLUDE_SUBDOMAINS MUSIC_HTTP_STS_PRELOAD MUSIC_HTTP_STS_FORCE_HEADER MUSIC_HTTP_BROWSER_XSS_FILTER MUSIC_HTTP_FRAME_DENY MUSIC_HTTP_CONTENT_TYPE_NO_SNIFF MUSIC_HTTP_CONTENT_SECURITY_POLICY MUSIC_HTTP_REFERRER_POLICY This document is still a work-in-progress. You can read more about each of these parameters at github.com/unrolled/secure.
Recommended Headers We recommend setting these configuration parameters. Please note these parameters should only be used when SSL is enabled.</description></item><item><title>Logging</title><link>https://regiocast.github.io/music-docs/server/configuration/logging/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://regiocast.github.io/music-docs/server/configuration/logging/</guid><description>The server logs are written to stderr and are captured by the Docker daemon. You can access the server logs by running the following Docker command:
$ docker logs &amp;lt;container name&amp;gt; The default log level is INFO. You can enable more detailed debug logging with the following configuration parameter:
MUSIC_LOGS_DEBUG=true Logs are written to stderr in json-format. You can change the default log format to something more human-readable with the following configuration parameters:</description></item><item><title>Album</title><link>https://regiocast.github.io/music-docs/api/albums/album/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album/</guid><description>Album The Model type Album struct { ID uuid.UUID `json:&amp;#34;id&amp;#34;` Copyright string `json:&amp;#34;copyright&amp;#34;` IsComplete bool `json:&amp;#34;isComplete&amp;#34;` IsSingle bool `json:&amp;#34;isSingle&amp;#34;` Name string `json:&amp;#34;name&amp;#34;` RecordLabel string `json:&amp;#34;recordLabel&amp;#34;` ReleaseDate time.Time `json:&amp;#34;releaseDate&amp;#34;` TrackCount int `json:&amp;#34;trackCount&amp;#34;` CreatedAt time.Time `json:&amp;#34;createdAt&amp;#34;` UpdatedAt time.Time `json:&amp;#34;updatedAt&amp;#34;` } Copyright The copyright text.
IsComplete (Required) Indicates whether the album is complete. If true, the album is complete; otherwise, it is not. An album is complete if it contains all its tracks and songs.</description></item><item><title>Album Artists</title><link>https://regiocast.github.io/music-docs/api/albums/album_artists/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_artists/</guid><description>Create or Link Artist to Album This endpoint allows you to Link an Album -&amp;gt; Artist relation or create a new Artist with Relation. If no id is provided a new Artist will be created.
POST /api/albums/{albumID}/artists If the Artist you want to link exists you can POST
{ &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; } If you want to create a new Artist:
Request
{ &amp;#34;ipi&amp;#34;: &amp;#34;withIpi&amp;#34;, &amp;#34;isni&amp;#34;: &amp;#34;withIsni&amp;#34;, &amp;#34;sortName&amp;#34;: &amp;#34;abca!&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;ultra performant artist!</description></item><item><title>Album Tracks</title><link>https://regiocast.github.io/music-docs/api/albums/album_tracks/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/albums/album_tracks/</guid><description>Alert Albums are working with Tracks not with Songs. Under the hood it&amp;rsquo;s the same entity.
Create or Link Track with Album This endpoint allows you to Link an Album -&amp;gt; Song relation or create a new Artist with Relation. If no id is provided a new Album will be created.
POST /api/albums/{albumID}/tracks If the Track you want to link exists you can POST
{ &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; } If you want to create a new Album:</description></item><item><title>Artist</title><link>https://regiocast.github.io/music-docs/api/artists/artist/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist/</guid><description>An artist is generally a musician (or musician persona), group of musicians, or other music professional (like a producer or engineer). Occasionally, it can also be a non-musical person (like a photographer, an illustrator, or a poet whose writings are set to music), or even a fictional character. For some other special cases, see special purpose artists.
Name
The artist&amp;rsquo;s name is the official name of an artist, whether it is a person, band, or character.</description></item><item><title>Artist Albums</title><link>https://regiocast.github.io/music-docs/api/artists/artist_albums/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_albums/</guid><description>Create or Link Album with Artist This endpoint allows you to Link an Artist -&amp;gt; Album relation or create a new Artist with Relation. If no id is provided a new Album will be created.
POST /api/artists/{artistID}/albums If the Album you want to link exists you can POST
{ &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; } If you want to create a new Album:
Request
{ &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Another World&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31+00:00&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1 } Response</description></item><item><title>Artist Members</title><link>https://regiocast.github.io/music-docs/api/artists/artist_member/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_member/</guid><description>Create or Link Member with Artist This endpoint allows you to Link an Member -&amp;gt; Album relation or create a new Artist with Relation. If no id is provided a new Member/Artist will be created.
POST /api/artists/{artistID}/members If the Member you want to link exists you can POST
{ &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; } If you want to create a new Member:
Request
{ &amp;#34;ipi&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;isni&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Awesome brady&amp;#34;, &amp;#34;sortName&amp;#34;: &amp;#34;Awesome brady&amp;#34; } Response</description></item><item><title>Artist Songs</title><link>https://regiocast.github.io/music-docs/api/artists/artist_songs/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_songs/</guid><description>Create or Link Song with Artist This endpoint allows you to Link a Song -&amp;gt; Album relation or create a new Artist with Relation. If no id is provided a new Song will be created.
POST /api/artists/{artistID}/songs If the Song you want to link exists you can POST
{ &amp;#34;id&amp;#34;: &amp;#34;1607d150-861c-4782-8c1b-abe58254373b&amp;#34; } If you want to create a new Song:
Request
{ &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31Z&amp;#34; } Response</description></item><item><title>Artist Update</title><link>https://regiocast.github.io/music-docs/api/artists/artist_update/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artists/artist_update/</guid><description>Update an Artist
PATCH /api/artists/{id} @TODO: Write documentation</description></item><item><title>Artwork Create</title><link>https://regiocast.github.io/music-docs/api/artworks/artwork_create/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/artworks/artwork_create/</guid><description>Create a new Artwork.
*POST* /api/artworks Allows to Upload a Artwork to the Service. Request has to be a multipart/form-data req.
form-data:
file the actual file alt alt name of the file Note: Filenames are URI encoded by default, to reduce possible user mistakes.
Response
{ &amp;#34;id&amp;#34;: &amp;#34;f7640b4e-7391-43cc-ae86-716c04d15b01&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Screenshot 2020-10-07 at 09.23.53.png&amp;#34;, &amp;#34;mimeType&amp;#34;: &amp;#34;image/png&amp;#34;, &amp;#34;size&amp;#34;: 4759480, &amp;#34;bucket&amp;#34;: &amp;#34;storage.delivc.com&amp;#34;, &amp;#34;publicPath&amp;#34;: &amp;#34;https://s3-eu-west-1.amazonaws.com/storage.delivc.com/1iYCDvVAta4SHdQlgi9Ty1nyqoR/Screenshot_2020-10-07_at_09.23.53.png&amp;#34;, &amp;#34;alt&amp;#34;: &amp;#34;lalaland&amp;#34;, &amp;#34;width&amp;#34;: 2880, &amp;#34;height&amp;#34;: 1800, &amp;#34;isAnimated&amp;#34;: false, &amp;#34;duration&amp;#34;: 0, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-07T14:50:23.</description></item><item><title>C#</title><link>https://regiocast.github.io/music-docs/swagger/csharp/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/swagger/csharp/</guid><description>Music generates documentation with the help of Swagger. You can use the swagger-codegen tool from the swagger project to generate:
RestClient for the HTTP calls Newtonsoft.Json for JSON marshalling .NET DataContract for the models. You can either download the cli app or use the online editor. The Album model look like this:
using System; using System.Linq; using System.IO; using System.Text; using System.Text.RegularExpressions; using System.Collections; using System.Collections.Generic; using System.Collections.ObjectModel; using System.</description></item><item><title>Digital Ocean</title><link>https://regiocast.github.io/music-docs/server/deployment/digital_ocean/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/server/deployment/digital_ocean/</guid><description>The App Platform gives you the power to quickly and easily build, deploy, manage, and scale apps. It keeps your apps secure by default, i.e., Digital Ocean creates, manages, and renews the SSL certificates while protecting your apps from DDoS attacks.
You can deploy the source code directly from your GitHub repositories (support for GitLab and Bitbucket is coming soon). You can also enable â€˜Autodeploy on Push,â€™ which automatically re-deploys the app each time you push to the branch containing the source code.</description></item><item><title>Postman Collection</title><link>https://regiocast.github.io/music-docs/api/resources/postman/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/resources/postman/</guid><description>You can Download the Postman Collection here: Download</description></item><item><title>Song</title><link>https://regiocast.github.io/music-docs/api/songs/song/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song/</guid><description>Shows all available API Operatings for song
Create a new Song POST /api/songs Request
{ &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31+00:00&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1 } Response
{ &amp;#34;id&amp;#34;: &amp;#34;b38db132-c4b7-4123-8107-abbb88b7d921&amp;#34;, &amp;#34;composerName&amp;#34;: &amp;#34;Red Hot Chili Peppers&amp;#34;, &amp;#34;discNumber&amp;#34;: 1, &amp;#34;durationInMillis&amp;#34;: 20000, &amp;#34;isrc&amp;#34;: &amp;#34;USQY51021557&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Aeroplane&amp;#34;, &amp;#34;releaseDate&amp;#34;: &amp;#34;1996-03-14T10:27:31Z&amp;#34;, &amp;#34;trackNumber&amp;#34;: 1, &amp;#34;albumId&amp;#34;: &amp;#34;00000000-0000-0000-0000-000000000000&amp;#34;, &amp;#34;album&amp;#34;: null, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-06T12:32:58.473323+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-06T12:32:58.473323+02:00&amp;#34; } Find Song by ID GET /api/songs/{id} Finds a song by it&amp;rsquo;s ID.</description></item><item><title>Song Albums</title><link>https://regiocast.github.io/music-docs/api/songs/song_album/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_album/</guid><description>Create or Link Album with Song This endpoint allows you to Link an Album -&amp;gt; Song relation or create a new Artist with Relation. If no id is provided a new Album will be created.
POST /api/songs/{songID}/albums If the Album you want to link exists you can POST
{ &amp;quot;id&amp;quot;: &amp;quot;1607d150-861c-4782-8c1b-abe58254373b&amp;quot; } If you want to create a new Album:
Request
{ &amp;quot;copyright&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;isComplete&amp;quot;: false, &amp;quot;isSingle&amp;quot;: true, &amp;quot;name&amp;quot;: &amp;quot;i am a single&amp;quot;, &amp;quot;recordLabel&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;releaseDate&amp;quot;: &amp;quot;0001-01-01T00:00:00Z&amp;quot;, &amp;quot;trackCount&amp;quot;: 0, } Response</description></item><item><title>Song Artists</title><link>https://regiocast.github.io/music-docs/api/songs/song_artist/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_artist/</guid><description>Create or Link Artist with Song This endpoint allows you to Link an Artist -&amp;gt; Song relation or create a new Artist with Relation. If no id is provided a new Artist will be created.
POST /api/songs/{songID}/artists If the Artist you want to link you can POST
{ &amp;quot;id&amp;quot;: &amp;quot;1607d150-861c-4782-8c1b-abe58254373b&amp;quot; } If you want to create a new Artist:
Request
{ &amp;quot;ipi&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;isni&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Red Hot Chili Peppers&amp;quot;, &amp;quot;sortName&amp;quot;: &amp;quot;&amp;quot; } Response</description></item><item><title>Song Artwork</title><link>https://regiocast.github.io/music-docs/api/songs/song_artwork/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0002</pubDate><guid>https://regiocast.github.io/music-docs/api/songs/song_artwork/</guid><description>List related Artwork To keep the API consistent. This endpoint is returning Array&amp;lt;Artwork&amp;gt;. The max length is 1.
GET /api/songs/{songID}/artwork Response
[ { &amp;#34;id&amp;#34;: &amp;#34;db457d3c-4610-484c-8ac0-e59041bf547c&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;iris-refactor.jpg&amp;#34;, &amp;#34;mimeType&amp;#34;: &amp;#34;image/jpeg&amp;#34;, &amp;#34;size&amp;#34;: 62854, &amp;#34;bucket&amp;#34;: &amp;#34;your.s3bucket.tld&amp;#34;, &amp;#34;publicPath&amp;#34;: &amp;#34;https://s3-eu-west-1.amazonaws.com/your.s3bucket.tld/1id8BSnrT51nZ0itggEocutlHWN/iris-refactor.jpg&amp;#34;, &amp;#34;alt&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;width&amp;#34;: 1031, &amp;#34;height&amp;#34;: 506, &amp;#34;isAnimated&amp;#34;: false, &amp;#34;duration&amp;#34;: 0, &amp;#34;createdAt&amp;#34;: &amp;#34;2020-10-09T08:46:13.233113+02:00&amp;#34;, &amp;#34;updatedAt&amp;#34;: &amp;#34;2020-10-09T08:46:13.233113+02:00&amp;#34; } ] Upload a new Artwork for given Song Request must be of type form-data and must contain file. You can append your Form with alt to create a alt-tag for the Artwork on-the-fly.</description></item></channel></rss>